#!/usr/bin/env php
<?php
if (file_exists(__DIR__.'/vendor/autoload.php')) {
    $autoloaderPath = __DIR__.'/vendor/autoload.php';
} elseif (file_exists(__DIR__.'/../vendor/autoload.php')) {
    $autoloaderPath = __DIR__ . '/../vendor/autoload.php';
} elseif (file_exists(__DIR__.'/../../../autoload.php')) {
    $autoloaderPath = __DIR__ . '/../../../autoload.php';
} else {
    die('Could not find autoload.php');
}
$classLoader = require $autoloaderPath;

$getOpt = new \GetOpt\GetOpt([
    ['p', 'bypass_prefix', \GetOpt\GetOpt::NO_ARGUMENT, 'Bypass PROJECT_NAME and ENV prefixing when getting secret'],
    ], [\GetOpt\GetOpt::SETTING_STRICT_OPERANDS => true]);

$getOpt->addOperands([
    \GetOpt\Operand::create('secrets manager class name', \GetOpt\Operand::OPTIONAL),
    \GetOpt\Operand::create('secret name', \GetOpt\Operand::OPTIONAL),
]);

$getOpt->process();
$options = $getOpt->getOptions();
$operands = $getOpt->getOperands();

// show help and quit
if (!count($operands) || $getOpt->getOption('help')) {
    echo $getOpt->getHelpText();
    exit;
}

$bypass_prefix = in_array('p', array_keys($options)) || in_array('bypass_prefix', array_keys($options));
if (count($operands) > 1) {
    $project_settings = new CivicActions\ProjectSettings\ProjectSettings();
    $secrets_class = 'CivicActions\ProjectSettings\\' . $operands[0];
    $secret_name = $operands[1];
}
else {
    $project_settings = new CivicActions\ProjectSettings\ProjectSettings('environments');
    $secrets_class = 'CivicActions\ProjectSettings\SampleSecretsManager';
    $secret_name = $operands[0];
}

$secret_value = '';
try {
    $secrets_manager = new $secrets_class($project_settings);
    $secret_value = $secrets_manager->getSecret($secret_name, $bypass_prefix);
} catch (Exception $e) {
    fwrite(STDERR, $e->getMessage() . "\nSecret: {$secret_name}\n");
}
echo $secret_value;
